{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":";AAyaA,YAAY","sourcesContent":["export interface AppMetricaPlugin {\n  /**\n   * Активация метрики\n   * @param config \n   */\n  activate(config: YAMConfig): Promise<void>;\n\n  /**\n   * Отправка простого события\n   * \n   * @param options \n   */\n  reportEvent(options: YAMReportEventOptions): Promise<void>;\n\n  /**\n   * Отправит событие ошибки\n   * \n   * @param options \n   */\n  reportError(options: YAMReportErrorOptions): Promise<void>;\n\n  /**\n   * Сообщить геопозицию\n   * \n   * @param location \n   */\n  setLocation(location: YAMLocation): Promise<void>;\n\n  /**\n   * Вкл/выкл отслеживание местоположения\n   * \n   * @param options \n   */\n  setLocationTracking(options: { enabled: boolean; }): Promise<void>;\n\n  /**\n   * eCommerce: Открытие страницы\n   * \n   * @param screen \n   */\n  showScreenEvent(screen: ECommerceScreen): Promise<void>;\n\n  /**\n   * eCommerce: Просмотр карточки товара\n   * \n   * @param options \n   */\n  showProductCardEvent(options: YAMShowProductCardEventOptions): Promise<void>;\n\n  /**\n   * eCommerce: Просмотр страницы товара\n   * \n   * @param options \n   */\n  showProductDetailsEvent(options: YAMShowProductDetailsEventOptions): Promise<void>;\n\n  /**\n   * eCommerce: Добавление товара в корзину\n   * \n   * @param cartItem \n   */\n  addCartItemEvent(cartItem: ECommerceCartItem): Promise<void>;\n\n  /**\n   * eCommerce: Удаление товара из корзины\n   * \n   * @param cartItem \n   */\n  removeCartItemEvent(cartItem: ECommerceCartItem): Promise<void>;\n\n  /**\n   * eCommerce: Начало оформления заказа\n   * \n   * @param order \n   */\n  beginCheckoutEvent(order: ECommerceOrder): Promise<void>;\n\n  /**\n   * eCommerce: Завершение оформления заказа\n   * \n   * @param order \n   */\n  purchaseEvent(order: ECommerceOrder): Promise<void>;\n\n  /**\n   * User Profile: Отправка идентификатора профиля\n   * \n   * @param userProfileId \n   */\n  setUserProfileId(userProfileId: YAMUserProfileId): Promise<void>;\n\n  /**\n   * User Profile: Отправка атрибутов профиля\n   * \n   * @param userProfile \n   */\n  reportUserProfile(userProfile: YAMUserProfile): Promise<void>;\n}\n\n//#region Share App Merika\nexport interface YAMConfig {\n  /**\n   * API key приложения\n   */\n  apiKey: string;\n\n  /**\n   * Версия приложения\n   */\n  appVersion?: string;\n\n  /**\n   * Определяет первый запуск приложения как обновление\n   */\n  handleFirstActivationAsUpdate?: boolean;\n\n  /**\n   * Включает/отключает отправку информации о местоположении устройства\n   */\n  locationTracking?: boolean;\n\n  /**\n   * Задает длительность тайм-аута сессии в секундах\n   */\n  sessionTimeout?: number;\n\n  /**\n   * Сбор и отправка информации об аварийных остановках приложения\n   */\n  crashReporting?: boolean;\n\n  /**\n   * Сбор и отправка информации об нативных аварийных остановках приложения (по умолчанию активен)\n   * Только Android!\n   */\n  nativeCrashReporting?: boolean;\n\n  /**\n   * Включает/отключает логирование работы библиотеки\n   */\n  logs?: boolean;\n\n  /**\n   * Устанавливает собственную информацию о местоположении устройства\n   */\n  location?: YAMLocation;\n\n  //--- Не реализованы ---\n  /**\n   * Определяет тип приложения как «детский», чтобы соответствовать правилам проверки детских приложений.\n   * Если опция включена, AppMetrica SDK не отправляет рекламные идентификаторы и информацию о местоположении.\n   */\n  // appForKids?: boolean;\n\n  /**\n   * Признак автоматического сбора и отправки информации о запуске приложения через deeplink\n   */\n  // appOpenTrackingEnabled?: boolean;\n\n  /**\n   * Определяет инициализацию AppMetrica как начало пользовательской сессии\n   */\n  // handleActivationAsSessionStart?: boolean;\n\n  /**\n   * Максимальное число отчетов об ошибках, которое хранится во внутренней БД\n   */\n  // maxReportsInDatabaseCount?: number; // UInt\n\n  /**\n   * Устанавливает объект класса YamPreloadInfo для отслеживания предустановленных приложений.\n   */\n  // preloadInfo?: unknown; // YamPreloadInfo (не реализованная структура)\n\n  /**\n   * Включает/выключает автоматический сбор информации об In-App покупках\n   */\n  // revenueAutoTrackingEnabled?: boolean;\n\n  /**\n   * Включает/отключает автоматическое отслеживание жизненного цикла приложений\n   */\n  // sessionsAutoTracking?: boolean;\n\n  /**\n   * Включает/отключает отправку данных на сервер AppMetrica\n   */\n  // statisticsSending?: boolean;\n\n  /**\n   * Задает идентификатор пользовательского профиля при активации.\n   */\n  // userProfileId?: string;\n}\n\nexport interface YAMLocation {\n  latitude?: number;\n  longitude?: number;\n  altitude?: number;\n  accuracy?: number;\n  vAccuracy?: number;\n  hAccuracy?: number;\n  course?: number;\n  speed?: number;\n  timestamp?: number;\n}\n\nexport interface YAMParams {\n  [paramName: string]: any;\n}\n\nexport interface YAMReportEventOptions {\n  name: string;\n  params?: YAMParams;\n}\n\nexport interface YAMReportErrorOptions {\n  /** Идентификатор группы */\n  group: string;\n\n  /** Сообщение ошибки */\n  message?: string;\n\n  /** Дополнительные параметры */\n  parameters?: {\n    [ptop: string]: string;\n  };\n}\n\nexport interface YAMShowProductCardEventOptions {\n  product: ECommerceProduct;\n  screen: ECommerceScreen;\n}\n\nexport interface YAMShowProductDetailsEventOptions {\n  product: ECommerceProduct;\n  referrer: ECommerceReferrer;\n}\n//#region \n\n//#region ECommerce definitions\nexport type ECommercePayload = { [key: string]: string; };\nexport type ECommerceAmount = [number, string]; // value: number, unit: string\n\nexport interface ECommercePrice {\n  /**\n   * Стоимость в фиатных деньгах\n   */\n  fiat: ECommerceAmount;\n\n  /**\n   * Стоимость внутренних компонентов — суммы во внутренней валюте.\n   * Допустимый размер: до 30 элементов\n   */\n  internalComponents?: ECommerceAmount[];\n}\n\nexport interface ECommerceReferrer {\n  /**\n   * Тип источника перехода — тип объекта, с которого выполняется переход.\n   * Например: «button», «banner», «href».\n   * Допустимый размер: до 100 символов.\n   */\n  type?: string;\n\n  /**\n   * Идентификатор источника перехода. Допустимый размер: до 2048 символов\n   */\n  identifier?: string;\n\n  /**\n   * Экран источника перехода — экран, с которого выполняется переход\n   */\n  screen?: ECommerceScreen;\n}\n\nexport interface ECommerceScreen {\n  /**\n   * Название экрана. Допустимые размеры: до 100 символов\n   */\n  name?: string;\n\n  /**\n   * Поисковый запрос. Допустимый размер: до 1000 символов\n   */\n  searchQuery?: string;\n\n  /**\n   * Путь к экрану по категориям.\n   * \n   * Допустимые размеры:\n   * - до 10 элементов;\n   * - размер одного элемента до 100 символов.\n   */\n  сategoriesPath?: string[];\n\n  /**\n   * Дополнительная информация об экране.\n   * \n   * Допустимые размеры:\n   * - общий размер payload: до 20 КБ;\n   * - размер key: до 100 символов;\n   * - размер value: до 1000 символов.\n   */\n  payload?: ECommercePayload;\n}\n\nexport interface ECommerceProduct {\n  /**\n   * Артикул товара. Допустимый размер: до 100 символов.\n   */\n  sku: string;\n\n  /**\n   * Название товара. Допустимый размер: до 1000 символов.\n   */\n  name?: string;\n\n  /**\n   * Фактическая цена товара — цена после применения всех скидок и промокодов.\n   */\n  actualPrice?: ECommercePrice;\n\n  /**\n   * Первоначальная цена товара\n   */\n  originalPrice?: ECommercePrice;\n\n  /**\n   * Путь к товару по категориям.\n   * Допустимые размеры:\n   * - до 10 элементов;\n   * - размер одного элемента до 100 символов.\n   */\n  categoriesPath?: string[];\n\n  /**\n   * Список промокодов, которые применяются к товару.\n   * Допустимые размеры:\n   * - до 20 элементов;\n   * - длина промокода до 100 символов.\n   */\n  promocodes?: string[];\n\n  /**\n   * Дополнительная информация о товаре.\n   * \n   * Допустимые размеры:\n   * - общий размер payload: до 20 КБ;\n   * - размер key: до 100 символов;\n   * - размер value: до 1000 символов.\n   */\n  payload?: ECommercePayload;\n}\n\n/**\n * Объект с информацией о товаре в корзине.\n */\nexport interface ECommerceCartItem {\n  /**\n   * Товар\n   */\n  product: ECommerceProduct;\n\n  /**\n   * Общая цена товара в корзине. Она учитывает количество, применяемые скидки и т.д.\n   */\n  revenue: ECommercePrice;\n\n  /**\n   * Количество\n   */\n  quantity: number;\n\n  /**\n   * Источника перехода в корзину\n   */\n  referrer?: ECommerceReferrer;\n}\n\nexport interface ECommerceOrder {\n  /**\n   * Идентификатор заказа. Допустимый размер: до 100 символов\n   */\n  identifier: string;\n\n  /**\n   * Список товаров в корзине\n   */\n  cartItems: ECommerceCartItem[];\n\n  /**\n   * Дополнительная информация о заказе.\n   * \n   * Допустимые размеры:\n   * - общий размер payload: до 20 КБ;\n   * - размер key: до 100 символов;\n   * - размер value: до 1000 символов.\n   */\n  payload?: ECommercePayload;\n}\n//#endregion\n\n//#region User Profile\nexport type YAMGenderType = 'male'|'female'|'other';\nexport interface YAMUserProfileBirthDate {\n  year: number;\n  month?: number;\n  day?: number;\n}\n\nexport interface YAMUserProfileAge {\n  age: number;\n}\n\nexport interface YAMUserProfileId {\n  id: string;\n}\n\nexport interface YAMUserProfile {\n  name?: string;\n  gender?: YAMGenderType;\n  notificationEnabled?: boolean;\n  birthDate?: YAMUserProfileBirthDate|YAMUserProfileAge;\n}\n//#endregion"]}